// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAinstr);
    Not(in=isAinstr, out=isCinstr);
    And(a=instruction[5], b=instruction[5], out=isAdest);
    And(a=instruction[4], b=instruction[4], out=isDdest);
    And(a=instruction[3], b=instruction[3], out=isMdest); 
    
    Mux16(a=instruction, b=outMALU, sel=isCinstr, out=inAR);
    
    Or(a=isAinstr, b=isAdest, out=loadAR);
    ARegister(in=inAR, load=loadAR, out=outAR, out[0..14]=addressM);

    Mux16(a=outAR, b=inM, sel=instruction[12], out=yALU);
    
    And(a=isCinstr, b=isDdest, out=loadDR);
    DRegister(in=outMALU, load=loadDR, out=outDR);

    ALU(x=outDR, y=yALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outMALU, out=outM, zr=zr, ng=ng);
	
    And(a=isCinstr, b=isMdest, out=writeM);

    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=po);
    Not(in=po, out=nopo);


    And(a=instruction[2], b=instruction[2], out=j1);
    And(a=instruction[1], b=instruction[1], out=j2);
    And(a=instruction[0], b=instruction[0], out=j3);

    Not(in=j1, out=notj1);
    Not(in=j2, out=notj2);
    Not(in=j3, out=notj3);

    And(a=j1, b=ng, out=jc1);
    And(a=j2, b=zr, out=jc2);
    And(a=j3, b=po, out=jc3);

    Or8Way(in[0]=jc1, in[1]=jc2, in[2]=jc3, in[3..7]=false, out=jc);
    And(a=jc, b=isCinstr, out=jump);
    PC(in=outAR, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
